{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DrawerView;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _elements = require(\"@react-navigation/elements\");\nvar _native = require(\"@react-navigation/native\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar Reanimated = _interopRequireWildcard(require(\"react-native-reanimated\"));\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\nvar _DrawerPositionContext = _interopRequireDefault(require(\"../utils/DrawerPositionContext\"));\nvar _DrawerStatusContext = _interopRequireDefault(require(\"../utils/DrawerStatusContext\"));\nvar _getDrawerStatusFromState = _interopRequireDefault(require(\"../utils/getDrawerStatusFromState\"));\nvar _DrawerContent = _interopRequireDefault(require(\"./DrawerContent\"));\nvar _DrawerToggleButton = _interopRequireDefault(require(\"./DrawerToggleButton\"));\nvar _GestureHandler = require(\"./GestureHandler\");\nvar _ScreenFallback = require(\"./ScreenFallback\");\nvar _excluded = [\"navigation\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n    width = _ref.width;\n\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = _reactNative.Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\nvar GestureHandlerWrapper = _GestureHandler.GestureHandlerRootView !== null && _GestureHandler.GestureHandlerRootView !== void 0 ? _GestureHandler.GestureHandlerRootView : _reactNative.View;\nfunction DrawerViewBase(_ref2) {\n  var _Reanimated$isConfigu;\n  var state = _ref2.state,\n    navigation = _ref2.navigation,\n    descriptors = _ref2.descriptors,\n    defaultStatus = _ref2.defaultStatus,\n    _ref2$drawerContent = _ref2.drawerContent,\n    drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n      return React.createElement(_DrawerContent.default, props);\n    } : _ref2$drawerContent,\n    _ref2$detachInactiveS = _ref2.detachInactiveScreens,\n    detachInactiveScreens = _ref2$detachInactiveS === void 0 ? _reactNative.Platform.OS === 'web' || _reactNative.Platform.OS === 'android' || _reactNative.Platform.OS === 'ios' : _ref2$detachInactiveS,\n    _ref2$useLegacyImplem = _ref2.useLegacyImplementation,\n    useLegacyImplementation = _ref2$useLegacyImplem === void 0 ? !((_Reanimated$isConfigu = Reanimated.isConfigured) !== null && _Reanimated$isConfigu !== void 0 && _Reanimated$isConfigu.call(Reanimated)) : _ref2$useLegacyImplem;\n  var legacyImplemenationNotAvailable = require('react-native-reanimated').abs === undefined;\n  if (useLegacyImplementation && legacyImplemenationNotAvailable) {\n    throw new Error('The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.');\n  }\n  var Drawer = useLegacyImplementation ? require('./legacy/Drawer').default : require('./modern/Drawer').default;\n  var focusedRouteKey = state.routes[state.index].key;\n  var _descriptors$focusedR = descriptors[focusedRouteKey].options,\n    _descriptors$focusedR2 = _descriptors$focusedR.drawerHideStatusBarOnOpen,\n    drawerHideStatusBarOnOpen = _descriptors$focusedR2 === void 0 ? false : _descriptors$focusedR2,\n    _descriptors$focusedR3 = _descriptors$focusedR.drawerPosition,\n    drawerPosition = _descriptors$focusedR3 === void 0 ? _reactNative.I18nManager.getConstants().isRTL ? 'right' : 'left' : _descriptors$focusedR3,\n    _descriptors$focusedR4 = _descriptors$focusedR.drawerStatusBarAnimation,\n    drawerStatusBarAnimation = _descriptors$focusedR4 === void 0 ? 'slide' : _descriptors$focusedR4,\n    drawerStyle = _descriptors$focusedR.drawerStyle,\n    _descriptors$focusedR5 = _descriptors$focusedR.drawerType,\n    drawerType = _descriptors$focusedR5 === void 0 ? _reactNative.Platform.select({\n      ios: 'slide',\n      default: 'front'\n    }) : _descriptors$focusedR5,\n    gestureHandlerProps = _descriptors$focusedR.gestureHandlerProps,\n    _descriptors$focusedR6 = _descriptors$focusedR.keyboardDismissMode,\n    keyboardDismissMode = _descriptors$focusedR6 === void 0 ? 'on-drag' : _descriptors$focusedR6,\n    _descriptors$focusedR7 = _descriptors$focusedR.overlayColor,\n    overlayColor = _descriptors$focusedR7 === void 0 ? 'rgba(0, 0, 0, 0.5)' : _descriptors$focusedR7,\n    _descriptors$focusedR8 = _descriptors$focusedR.swipeEdgeWidth,\n    swipeEdgeWidth = _descriptors$focusedR8 === void 0 ? 32 : _descriptors$focusedR8,\n    _descriptors$focusedR9 = _descriptors$focusedR.swipeEnabled,\n    swipeEnabled = _descriptors$focusedR9 === void 0 ? _reactNative.Platform.OS !== 'web' && _reactNative.Platform.OS !== 'windows' && _reactNative.Platform.OS !== 'macos' : _descriptors$focusedR9,\n    _descriptors$focusedR10 = _descriptors$focusedR.swipeMinDistance,\n    swipeMinDistance = _descriptors$focusedR10 === void 0 ? 60 : _descriptors$focusedR10;\n  var _React$useState = React.useState([focusedRouteKey]),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    loaded = _React$useState2[0],\n    setLoaded = _React$useState2[1];\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat((0, _toConsumableArray2.default)(loaded), [focusedRouteKey]));\n  }\n  var dimensions = (0, _reactNativeSafeAreaContext.useSafeAreaFrame)();\n  var _useTheme = (0, _native.useTheme)(),\n    colors = _useTheme.colors;\n  var drawerStatus = (0, _getDrawerStatusFromState.default)(state);\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(Object.assign({}, _native.DrawerActions.openDrawer(), {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(Object.assign({}, _native.DrawerActions.closeDrawer(), {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n    var handleHardwareBack = function handleHardwareBack() {\n      if (!navigation.isFocused()) {\n        return false;\n      }\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n      return true;\n    };\n    var handleEscape = function handleEscape(e) {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n\n    var subscription = _reactNative.BackHandler.addEventListener('hardwareBackPress', handleHardwareBack);\n    if (_reactNative.Platform.OS === 'web') {\n      var _document, _document$body, _document$body$addEve;\n      (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', handleEscape);\n    }\n    return function () {\n      subscription.remove();\n      if (_reactNative.Platform.OS === 'web') {\n        var _document2, _document2$body, _document2$body$remov;\n        (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', handleEscape);\n      }\n    };\n  }, [defaultStatus, drawerStatus, drawerType, handleDrawerClose, handleDrawerOpen, navigation]);\n  var renderDrawerContent = function renderDrawerContent() {\n    return React.createElement(_DrawerPositionContext.default.Provider, {\n      value: drawerPosition\n    }, drawerContent({\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n  var renderSceneContent = function renderSceneContent() {\n    return React.createElement(_ScreenFallback.MaybeScreenContainer, {\n      enabled: detachInactiveScreens,\n      hasTwoStates: true,\n      style: styles.content\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var _descriptor$options = descriptor.options,\n        _descriptor$options$l = _descriptor$options.lazy,\n        lazy = _descriptor$options$l === void 0 ? true : _descriptor$options$l,\n        unmountOnBlur = _descriptor$options.unmountOnBlur;\n      var isFocused = state.index === index;\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        return null;\n      }\n      var _descriptor$options2 = descriptor.options,\n        freezeOnBlur = _descriptor$options2.freezeOnBlur,\n        _descriptor$options2$ = _descriptor$options2.header,\n        header = _descriptor$options2$ === void 0 ? function (_ref3) {\n          var _options$headerLeft;\n          var layout = _ref3.layout,\n            options = _ref3.options;\n          return React.createElement(_elements.Header, _extends({}, options, {\n            layout: layout,\n            title: (0, _elements.getHeaderTitle)(options, route.name),\n            headerLeft: (_options$headerLeft = options.headerLeft) !== null && _options$headerLeft !== void 0 ? _options$headerLeft : function (props) {\n              return React.createElement(_DrawerToggleButton.default, props);\n            }\n          }));\n        } : _descriptor$options2$,\n        headerShown = _descriptor$options2.headerShown,\n        headerStatusBarHeight = _descriptor$options2.headerStatusBarHeight,\n        headerTransparent = _descriptor$options2.headerTransparent,\n        sceneContainerStyle = _descriptor$options2.sceneContainerStyle;\n      return React.createElement(_ScreenFallback.MaybeScreen, {\n        key: route.key,\n        style: [_reactNative.StyleSheet.absoluteFill, {\n          zIndex: isFocused ? 0 : -1\n        }],\n        visible: isFocused,\n        enabled: detachInactiveScreens,\n        freezeOnBlur: freezeOnBlur\n      }, React.createElement(_elements.Screen, {\n        focused: isFocused,\n        route: descriptor.route,\n        navigation: descriptor.navigation,\n        headerShown: headerShown,\n        headerStatusBarHeight: headerStatusBarHeight,\n        headerTransparent: headerTransparent,\n        header: header({\n          layout: dimensions,\n          route: descriptor.route,\n          navigation: descriptor.navigation,\n          options: descriptor.options\n        }),\n        style: sceneContainerStyle\n      }, descriptor.render()));\n    }));\n  };\n  return React.createElement(_DrawerStatusContext.default.Provider, {\n    value: drawerStatus\n  }, React.createElement(Drawer, {\n    open: drawerStatus !== 'closed',\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    swipeEnabled: swipeEnabled,\n    swipeEdgeWidth: swipeEdgeWidth,\n    swipeVelocityThreshold: 500,\n    swipeDistanceThreshold: swipeMinDistance,\n    hideStatusBarOnOpen: drawerHideStatusBarOnOpen,\n    statusBarAnimation: drawerStatusBarAnimation,\n    keyboardDismissMode: keyboardDismissMode,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: _reactNative.StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: _reactNative.StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    renderDrawerContent: renderDrawerContent,\n    renderSceneContent: renderSceneContent,\n    dimensions: dimensions\n  }));\n}\nfunction DrawerView(_ref4) {\n  var navigation = _ref4.navigation,\n    rest = (0, _objectWithoutProperties2.default)(_ref4, _excluded);\n  return React.createElement(_elements.SafeAreaProviderCompat, null, React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(DrawerViewBase, _extends({\n    navigation: navigation\n  }, rest))));\n}\nvar styles = _reactNative.StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["DrawerView.tsx"],"names":["getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","GestureHandlerWrapper","GestureHandlerRootView","View","DrawerViewBase","state","navigation","descriptors","defaultStatus","drawerContent","props","detachInactiveScreens","useLegacyImplementation","Reanimated","isConfigured","legacyImplemenationNotAvailable","require","abs","undefined","Error","Drawer","default","focusedRouteKey","routes","index","key","drawerHideStatusBarOnOpen","drawerPosition","I18nManager","getConstants","isRTL","drawerStatusBarAnimation","drawerStyle","drawerType","select","ios","gestureHandlerProps","keyboardDismissMode","overlayColor","swipeEdgeWidth","swipeEnabled","swipeMinDistance","options","loaded","setLoaded","React","useState","includes","dimensions","useSafeAreaFrame","colors","useTheme","drawerStatus","getDrawerStatusFromState","handleDrawerOpen","useCallback","dispatch","DrawerActions","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","handleHardwareBack","isFocused","handleEscape","e","subscription","BackHandler","addEventListener","body","remove","removeEventListener","renderDrawerContent","renderSceneContent","styles","content","map","route","descriptor","lazy","unmountOnBlur","freezeOnBlur","header","layout","getHeaderTitle","name","headerLeft","headerShown","headerStatusBarHeight","headerTransparent","sceneContainerStyle","StyleSheet","absoluteFill","zIndex","render","backgroundColor","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","DrawerView","rest","create","flex"],"mappings":"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","sourcesContent":["import {\n  getHeaderTitle,\n  Header,\n  SafeAreaProviderCompat,\n  Screen,\n} from '@react-navigation/elements';\nimport {\n  DrawerActions,\n  DrawerNavigationState,\n  DrawerStatus,\n  ParamListBase,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  BackHandler,\n  I18nManager,\n  Platform,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport * as Reanimated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\n\nimport type {\n  DrawerContentComponentProps,\n  DrawerDescriptorMap,\n  DrawerHeaderProps,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerNavigationProp,\n  DrawerProps,\n} from '../types';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport DrawerStatusContext from '../utils/DrawerStatusContext';\nimport getDrawerStatusFromState from '../utils/getDrawerStatusFromState';\nimport DrawerContent from './DrawerContent';\nimport DrawerToggleButton from './DrawerToggleButton';\nimport { GestureHandlerRootView } from './GestureHandler';\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\n\ntype Props = DrawerNavigationConfig & {\n  defaultStatus: DrawerStatus;\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nfunction DrawerViewBase({\n  state,\n  navigation,\n  descriptors,\n  defaultStatus,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  detachInactiveScreens = Platform.OS === 'web' ||\n    Platform.OS === 'android' ||\n    Platform.OS === 'ios',\n  // Reanimated 2 is not configured\n  // @ts-expect-error: the type definitions are incomplete\n  useLegacyImplementation = !Reanimated.isConfigured?.(),\n}: Props) {\n  // Reanimated v3 dropped legacy v1 syntax\n  const legacyImplemenationNotAvailable =\n    require('react-native-reanimated').abs === undefined;\n\n  if (useLegacyImplementation && legacyImplemenationNotAvailable) {\n    throw new Error(\n      'The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.'\n    );\n  }\n\n  const Drawer: React.ComponentType<DrawerProps> = useLegacyImplementation\n    ? require('./legacy/Drawer').default\n    : require('./modern/Drawer').default;\n\n  const focusedRouteKey = state.routes[state.index].key;\n  const {\n    drawerHideStatusBarOnOpen = false,\n    drawerPosition = I18nManager.getConstants().isRTL ? 'right' : 'left',\n    drawerStatusBarAnimation = 'slide',\n    drawerStyle,\n    drawerType = Platform.select({ ios: 'slide', default: 'front' }),\n    gestureHandlerProps,\n    keyboardDismissMode = 'on-drag',\n    overlayColor = 'rgba(0, 0, 0, 0.5)',\n    swipeEdgeWidth = 32,\n    swipeEnabled = Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n    swipeMinDistance = 60,\n  } = descriptors[focusedRouteKey].options;\n\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const dimensions = useSafeAreaFrame();\n\n  const { colors } = useTheme();\n\n  const drawerStatus = getDrawerStatusFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n\n    const handleHardwareBack = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n\n      return true;\n    };\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    const subscription = BackHandler.addEventListener(\n      'hardwareBackPress',\n      handleHardwareBack\n    );\n\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', handleEscape);\n    }\n\n    return () => {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        document?.body?.removeEventListener?.('keyup', handleEscape);\n      }\n    };\n  }, [\n    defaultStatus,\n    drawerStatus,\n    drawerType,\n    handleDrawerClose,\n    handleDrawerOpen,\n    navigation,\n  ]);\n\n  const renderDrawerContent = () => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderSceneContent = () => {\n    return (\n      <MaybeScreenContainer\n        enabled={detachInactiveScreens}\n        hasTwoStates\n        style={styles.content}\n      >\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { lazy = true, unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a lazy screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            freezeOnBlur,\n            header = ({ layout, options }: DrawerHeaderProps) => (\n              <Header\n                {...options}\n                layout={layout}\n                title={getHeaderTitle(options, route.name)}\n                headerLeft={\n                  options.headerLeft ??\n                  ((props) => <DrawerToggleButton {...props} />)\n                }\n              />\n            ),\n            headerShown,\n            headerStatusBarHeight,\n            headerTransparent,\n            sceneContainerStyle,\n          } = descriptor.options;\n\n          return (\n            <MaybeScreen\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { zIndex: isFocused ? 0 : -1 }]}\n              visible={isFocused}\n              enabled={detachInactiveScreens}\n              freezeOnBlur={freezeOnBlur}\n            >\n              <Screen\n                focused={isFocused}\n                route={descriptor.route}\n                navigation={descriptor.navigation}\n                headerShown={headerShown}\n                headerStatusBarHeight={headerStatusBarHeight}\n                headerTransparent={headerTransparent}\n                header={header({\n                  layout: dimensions,\n                  route: descriptor.route,\n                  navigation:\n                    descriptor.navigation as DrawerNavigationProp<ParamListBase>,\n                  options: descriptor.options,\n                })}\n                style={sceneContainerStyle}\n              >\n                {descriptor.render()}\n              </Screen>\n            </MaybeScreen>\n          );\n        })}\n      </MaybeScreenContainer>\n    );\n  };\n\n  return (\n    <DrawerStatusContext.Provider value={drawerStatus}>\n      <Drawer\n        open={drawerStatus !== 'closed'}\n        onOpen={handleDrawerOpen}\n        onClose={handleDrawerClose}\n        gestureHandlerProps={gestureHandlerProps}\n        swipeEnabled={swipeEnabled}\n        swipeEdgeWidth={swipeEdgeWidth}\n        swipeVelocityThreshold={500}\n        swipeDistanceThreshold={swipeMinDistance}\n        hideStatusBarOnOpen={drawerHideStatusBarOnOpen}\n        statusBarAnimation={drawerStatusBarAnimation}\n        keyboardDismissMode={keyboardDismissMode}\n        drawerType={drawerType}\n        drawerPosition={drawerPosition}\n        drawerStyle={[\n          {\n            width: getDefaultDrawerWidth(dimensions),\n            backgroundColor: colors.card,\n          },\n          drawerType === 'permanent' &&\n            (drawerPosition === 'left'\n              ? {\n                  borderRightColor: colors.border,\n                  borderRightWidth: StyleSheet.hairlineWidth,\n                }\n              : {\n                  borderLeftColor: colors.border,\n                  borderLeftWidth: StyleSheet.hairlineWidth,\n                }),\n          drawerStyle,\n        ]}\n        overlayStyle={{ backgroundColor: overlayColor }}\n        renderDrawerContent={renderDrawerContent}\n        renderSceneContent={renderSceneContent}\n        dimensions={dimensions}\n      />\n    </DrawerStatusContext.Provider>\n  );\n}\n\nexport default function DrawerView({ navigation, ...rest }: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <GestureHandlerWrapper style={styles.content}>\n        <DrawerViewBase navigation={navigation} {...rest} />\n      </GestureHandlerWrapper>\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}