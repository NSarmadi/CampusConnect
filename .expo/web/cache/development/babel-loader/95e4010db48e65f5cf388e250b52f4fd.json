{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _reactNativeReanimated = _interopRequireWildcard(require(\"react-native-reanimated\"));\nvar _excluded = [\"progress\", \"onPress\", \"style\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar PROGRESS_EPSILON = 0.05;\nvar Overlay = React.forwardRef(function Overlay(_ref, ref) {\n  var progress = _ref.progress,\n    onPress = _ref.onPress,\n    style = _ref.style,\n    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var animatedStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {\n    return {\n      opacity: progress.value,\n      zIndex: progress.value > PROGRESS_EPSILON ? 0 : -1\n    };\n  });\n  var animatedProps = (0, _reactNativeReanimated.useAnimatedProps)(function () {\n    var active = progress.value > PROGRESS_EPSILON;\n    return {\n      pointerEvents: active ? 'auto' : 'none',\n      accessibilityElementsHidden: !active,\n      importantForAccessibility: active ? 'auto' : 'no-hide-descendants'\n    };\n  });\n  return React.createElement(_reactNativeReanimated.default.View, _extends({}, props, {\n    ref: ref,\n    style: [styles.overlay, overlayStyle, animatedStyle, style],\n    animatedProps: animatedProps\n  }), React.createElement(_reactNative.Pressable, {\n    onPress: onPress,\n    style: styles.pressable\n  }));\n});\nvar overlayStyle = _reactNative.Platform.select({\n  web: {\n    WebkitTapHighlightColor: 'transparent'\n  },\n  default: {}\n});\nvar styles = _reactNative.StyleSheet.create({\n  overlay: Object.assign({}, _reactNative.StyleSheet.absoluteFillObject, {\n    backgroundColor: 'rgba(0, 0, 0, 0.5)'\n  }),\n  pressable: {\n    flex: 1\n  }\n});\nvar _default = Overlay;\nexports.default = _default;","map":{"version":3,"sources":["Overlay.tsx"],"names":["PROGRESS_EPSILON","Overlay","forwardRef","progress","onPress","style","props","ref","animatedStyle","useAnimatedStyle","opacity","value","zIndex","animatedProps","useAnimatedProps","active","pointerEvents","accessibilityElementsHidden","importantForAccessibility","styles","overlay","overlayStyle","pressable","select","web","WebkitTapHighlightColor","default","create","StyleSheet","absoluteFillObject","backgroundColor","flex"],"mappings":";;;;;;AAAA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;AAKA,IAAMA,gBAAgB,GAAG,IAAzB;AAOA,IAAMC,OAAO,GAAG,KAAK,CAACC,UAAN,CAAiB,SAASD,OAAT,CAAA,IAAA,EAE/BM,GAF+B,EAG/B;EAFA,IAAEJ,QAAF,GAEA,IAAA,CAFEA,QAAF;IAAYC,OAAZ,GAEA,IAAA,CAFYA,OAAZ;IAAqBC,KAArB,GAEA,IAAA,CAFqBA,KAArB;IAA+BC,KAAAA,0CAE/B,IAAA;EACA,IAAME,aAAa,GAAGC,IAAAA,uCAAgB,EAAC,YAAM;IAC3C,OAAO;MACLC,OAAO,EAAEP,QAAQ,CAACQ,KADb;MAILC,MAAM,EAAET,QAAQ,CAACQ,KAATR,GAAiBH,gBAAjBG,GAAoC,CAApCA,GAAwC,CAAC;IAJ5C,CAAP;EAMD,CAPqC,CAAtC;EASA,IAAMU,aAAa,GAAGC,IAAAA,uCAAgB,EAAC,YAAM;IAC3C,IAAMC,MAAM,GAAGZ,QAAQ,CAACQ,KAATR,GAAiBH,gBAAhC;IAEA,OAAO;MACLgB,aAAa,EAAED,MAAM,GAAG,MAAH,GAAY,MAD5B;MAELE,2BAA2B,EAAE,CAACF,MAFzB;MAGLG,yBAAyB,EAAEH,MAAM,GAAG,MAAH,GAAY;IAHxC,CAAP;EAKD,CARqC,CAAtC;EAUA,OACE,KAAA,CAAA,aAAA,CAAC,8BAAD,CAAU,IAAV,EAAA,QAAA,CAAA,CAAA,CAAA,EACMT,KADN,EAAA;IAEE,GAAG,EAAEC,GAFP;IAGE,KAAK,EAAE,CAACY,MAAM,CAACC,OAAR,EAAiBC,YAAjB,EAA+Bb,aAA/B,EAA8CH,KAA9C,CAHT;IAIE,aAAa,EAAEQ;EAJjB,CAAA,CAAA,EAME,KAAA,CAAA,aAAA,CAAC,sBAAD,EAAA;IAAW,OAAO,EAAET,OAApB;IAA6B,KAAK,EAAEe,MAAM,CAACG;EAA3C,CAAA,CANF,CADF;AAUD,CAjCe,CAAhB;AAmCA,IAAMD,YAAY,GAAG,qBAAQ,CAACE,MAAT,CAAwC;EAC3DC,GAAG,EAAE;IAGHC,uBAAuB,EAAE;EAHtB,CADsD;EAM3DC,OAAO,EAAE,CAAA;AANkD,CAAxC,CAArB;AASA,IAAMP,MAAM,GAAG,uBAAU,CAACQ,MAAX,CAAkB;EAC/BP,OAAO,oBACFQ,uBAAU,CAACC,kBADP;IAEPC,eAAe,EAAE;EAAA,EAHY;EAK/BR,SAAS,EAAE;IACTS,IAAI,EAAE;EADG;AALoB,CAAlB,CAAf;AAAA,eAUe9B,OAAf;AAAA","sourcesContent":["import * as React from 'react';\nimport { Platform, Pressable, StyleSheet } from 'react-native';\nimport Animated, {\n  useAnimatedProps,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\n\nconst PROGRESS_EPSILON = 0.05;\n\ntype Props = React.ComponentProps<typeof Animated.View> & {\n  progress: Animated.SharedValue<number>;\n  onPress: () => void;\n};\n\nconst Overlay = React.forwardRef(function Overlay(\n  { progress, onPress, style, ...props }: Props,\n  ref: React.Ref<Animated.View>\n) {\n  const animatedStyle = useAnimatedStyle(() => {\n    return {\n      opacity: progress.value,\n      // We don't want the user to be able to press through the overlay when drawer is open\n      // We can send the overlay behind the screen to avoid it\n      zIndex: progress.value > PROGRESS_EPSILON ? 0 : -1,\n    };\n  });\n\n  const animatedProps = useAnimatedProps(() => {\n    const active = progress.value > PROGRESS_EPSILON;\n\n    return {\n      pointerEvents: active ? 'auto' : 'none',\n      accessibilityElementsHidden: !active,\n      importantForAccessibility: active ? 'auto' : 'no-hide-descendants',\n    } as const;\n  });\n\n  return (\n    <Animated.View\n      {...props}\n      ref={ref}\n      style={[styles.overlay, overlayStyle, animatedStyle, style]}\n      animatedProps={animatedProps}\n    >\n      <Pressable onPress={onPress} style={styles.pressable} />\n    </Animated.View>\n  );\n});\n\nconst overlayStyle = Platform.select<Record<string, string>>({\n  web: {\n    // Disable touch highlight on mobile Safari.\n    // WebkitTapHighlightColor must be used outside of StyleSheet.create because react-native-web will omit the property.\n    WebkitTapHighlightColor: 'transparent',\n  },\n  default: {},\n});\n\nconst styles = StyleSheet.create({\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  pressable: {\n    flex: 1,\n  },\n});\n\nexport default Overlay;\n"]},"metadata":{},"sourceType":"script"}